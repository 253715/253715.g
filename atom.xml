<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学技术的小凯</title>
  
  
  <link href="https://github.com/253715/253715.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/253715/253715.github.io.git/"/>
  <updated>2022-04-30T06:32:42.006Z</updated>
  <id>https://github.com/253715/253715.github.io.git/</id>
  
  <author>
    <name>JonQuet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spingboot</title>
    <link href="https://github.com/253715/253715.github.io.git/2022/04/30/spingboot/"/>
    <id>https://github.com/253715/253715.github.io.git/2022/04/30/spingboot/</id>
    <published>2022-04-30T06:32:41.000Z</published>
    <updated>2022-04-30T06:32:42.006Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>spingboot</title>
    <link href="https://github.com/253715/253715.github.io.git/2022/04/30/Verio%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E8%AF%B4%E6%98%8E/"/>
    <id>https://github.com/253715/253715.github.io.git/2022/04/30/Verio%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E8%AF%B4%E6%98%8E/</id>
    <published>2022-04-30T06:32:41.000Z</published>
    <updated>2022-04-30T08:33:48.353Z</updated>
    
    <content type="html"><![CDATA[<p>Verio是一个基于SSM+JSP的房屋租赁系统，包括管理员、房东和租客三种角色。<br>介绍地址：</p><h2 id="0-视频介绍"><a href="#0-视频介绍" class="headerlink" title="0. 视频介绍"></a>0. 视频介绍</h2><h2 id="1-项目导入，推荐插件安装，启动项目"><a href="#1-项目导入，推荐插件安装，启动项目" class="headerlink" title="1. 项目导入，推荐插件安装，启动项目"></a>1. 项目导入，推荐插件安装，启动项目</h2><h4 id="1）项目导入过程如下"><a href="#1）项目导入过程如下" class="headerlink" title="1）项目导入过程如下"></a>1）项目导入过程如下</h4><ul><li>通过IDEA导入，修改Constant里uploads目录位置</li><li>修改 db.properties</li><li>配置tomcat</li><li>创建数据库</li><li>导入数据库</li><li>运行tomcat</li></ul><h4 id="2）推荐插件"><a href="#2）推荐插件" class="headerlink" title="2）推荐插件"></a>2）推荐插件</h4><ul><li>搜索 Lombok，功能是帮我们生成getter/setter方法，在类上面加@Data注解即可，不要再写一大堆getter/setter方法啦！</li><li>搜索 Free MyBatis，功能是帮我们从mapper接口快速跳转到mapper xml </li><li>搜索 RestfulToolkit，帮我们快速找到接口代码位置，即根据接口路径找controller类里方法位置，快捷键 ctrl + \</li></ul><h2 id="2-数据库设计讲解和功能介绍，交叉讲"><a href="#2-数据库设计讲解和功能介绍，交叉讲" class="headerlink" title="2. 数据库设计讲解和功能介绍，交叉讲"></a>2. 数据库设计讲解和功能介绍，交叉讲</h2><ul><li>t_feedback  反馈表</li><li>t_house  房屋信息表</li><li>t_mark  收藏表</li><li>t_news  新闻表</li><li>t_order     订单表</li><li>t_user   用户表</li></ul><h2 id="3-代码结构简单说明"><a href="#3-代码结构简单说明" class="headerlink" title="3. 代码结构简单说明"></a>3. 代码结构简单说明</h2><ul><li><p>pom.xml 项目依赖工具</p></li><li><p>src/main 代码父目录</p></li><li><pre><code>java  Java代码目录</code></pre></li><li><pre><code>    common 公共的类：配置、常量、封装的对象 </code></pre></li><li><pre><code>    controller  控制器，负责接收请求，后端代码入口在这里，通常这一层会去调用 service 层(本质是service impl层)</code></pre></li><li><pre><code>    entity实体类，跟数据库表一一对应，表名对应类名，字段名对应属性名</code></pre></li><li><pre><code>    mapper数据访问层，即直接操作数据库的接口(继承baseMapper，省去了增删改查的方法)</code></pre></li><li><pre><code>    service业务逻辑层接口</code></pre></li><li><pre><code>        impl业务逻辑层实现，通常这一层会去调用 mapper 层</code></pre></li><li><p>常用调用关系：</p><pre><code>浏览器或js里的ajax方法 -&gt; controller -&gt; service impl -&gt; mapper -&gt;数据库SQL语句</code></pre></li><li><p>java  Java代码目录</p></li><li><p>resources 配置文件目录</p></li><li><p>webapp 前端文件目录</p></li></ul><h2 id="4-Spring讲解"><a href="#4-Spring讲解" class="headerlink" title="4. Spring讲解"></a>4. Spring讲解</h2><p>Spring帮我们管理对象，不会重复创建对象，节约内存</p><h4 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h4><ul><li>1）给需要让Spring管理的类加注解，如 @Service、@Controller、@Repository、@Component，如<br>```<br>  @Service<br>  public class HouseServiceImpl implements HouseService {<br>  ……<br>  }</li></ul><p></p><pre><code>- 2）给需要创建对象的地方，@Autowired，如</code></pre><pre><code>@Autowiredprivate HouseService houseService;</code></pre><pre><code>## 5. MyBatis讲解，JDBC、MyBatis、MyBatisPlus对比mybatis：替代原始的JDBC的方法，直接通过定义接口，一个方法对应一个SQL语句，mybatis帮我们执行，不需要我们去处理像JDBC一样拿数据那么麻烦举例：根据用户ID查询用户- 1）JDBC的写法</code></pre><p>String sql = “SELECT * FROM user where id= ? “;<br>PreparedStatement statement = connection.prepareStatement(sql);<br>statement.setString(1, name);<br>ResultSet rs = statement.executeQuery();<br>while (rs.next()) {<br>    // 将数据库的数据转换成POJO实例<br>    user.setId(rs.getInt(“id”));<br>    user.setUserName(rs.getString(“userName”));<br>    user.setNickName(rs.getString(“nickname”));<br>    user.setPhone(rs.getString(“phone”));<br>    user.setEmail(rs.getString(“email”));<br>    …… // 有几个属性需要set几次<br>}</p><pre><code>- 2）MyBatis 写法</code></pre><pre><code>@Select("select * from user where id = #{value}")User findById(Long id);</code></pre><pre><code>- 3） MyBatis Plus写法直接让Mapper接口基础 BaseMapper ，不需要再去写增删改查的逻辑了，直接从父类里面调用，父类的实现由mybatis plus帮我们做(动态代理实现)## 6. SpringMVC讲解，Servlet和SpringMVC对比SpringMVC 帮助我们管理请求接口，处理请求如 查询用户信息页面#### Servlet 和 SpringMVC对比- 1）Servlet 的写法</code></pre><p>@WebServlet(“/user/info”)<br>public class UserInfoGetServlet extends HttpServlet {<br>    @Override<br>    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<br>        // 解决乱码<br>        request.setCharacterEncoding(“utf-8”);<br>        // 获取用户ID<br>        Long id = (Long) request.getParameter(“id”);<br>           // 去调用service 查询用户信息<br>           User user = userService.findById(id);<br>        // 把用户信息传给前端<br>        request.setAttribute(“user”, user);<br>        //向页面跳转<br>        request.getRequestDispatcher(“/jsp/user/info.jsp”).forward(request,response);<br>    }</p><pre><code>@Overrideprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {    this.doGet(req, resp);}</code></pre><p>}</p><pre><code>- 2) SpringMVC写法</code></pre><pre><code>@RequestMapping("/user/info")public String profile(@RequestParam("id") Long id,  Model model) {    // 去调用service 查询用户信息    User user = userService.get(id);    // 把用户信息传给前端     model.addAttribute("user", user);    // 页面跳转,在这个页面渲染    return "admin/my-profile";}</code></pre><pre><code>#### SpringMVC详细讲解1）@RequestParam如新闻列表</code></pre><pre><code>@RequestMapping("/news")public String index(@RequestParam(value = "page", defaultValue = "1") Integer pageNumber,                    @RequestParam(value = "size", defaultValue = "6") Integer pageSize,) {    ...}</code></pre><pre><code>2）@PathVariable房子详情页面</code></pre><pre><code>@RequestMapping("/house/detail/{id}")public String search(@PathVariable("id") Long id) {    ...}</code></pre><pre><code>3) @ResponseBody登录提交请求</code></pre><pre><code>@RequestMapping(value = "/login/submit", method = RequestMethod.POST)@ResponseBodypublic JsonResult loginSubmit(@RequestParam("userName") String userName,                              @RequestParam("userPass") String userPass) {}</code></pre><pre><code>## 7.JSP讲解模块分块，c:if、c:forEach 等标签的使用，${xxx} 的使用，时间格式化的使用## 8.JavaScript 和 ajax onclick=""登录代码示例代码位置/webapp/assets/js/script.jsJS代码</code></pre><pre><code>function submitLogin() {$.ajax({    type: 'POST',    url: '/login/submit',    async: false,    data: $("#loginForm").serialize(), // 获取该表单下的所有参数    success: function (data) {        // 提示信息        alert(data.msg);        // 如果登录成功，刷新页面        if (data.code == 1) {            window.location.reload();        }    }});</code></pre><p>}</p><pre><code>JSP的代码</code></pre><p><button type="button" onclick="submitLogin()" class="btn btn-md full-width pop-login bg-2">登录</button></p><pre><code>后端 `/login/submit` 这个请求的，可以通过 ctrl + \ 搜索，找到后端代码controller这个方法必须要加 @ResponseBody## 9. 怎么找代码和看代码？- 全局搜索字符串，快捷键 ctrl + shift + f，比如我想搜索这个项目里所有的 Verio 的字符串，可以用这个快捷键- 搜索接口，ctrl + \ ，比如我想搜索用户相关的接口，搜 /user，比如我要搜登录接口代码 /login/submit## 10.功能讲解-登录功能## 11.功能讲解-注册功能## 12.功能讲解-找回密码功能## 13.功能讲解-整租/合租列表和搜索功能## 14.功能讲解-房屋详情功能## 15.功能讲解-联系房东功能## 16.功能讲解-创建订单功能## 17.功能讲解-签订合同功能## 18.功能讲解-支付页面功能## 19.功能讲解-我的家(房屋列表)功能## 20.功能讲解-订单相关管理功能、取消、退租、退租审核## 21.功能讲解-房屋列表功能、发布房屋功能、审核以及下架相关功能## 22.功能讲解-收藏功能## 23.功能讲解-反馈功能## 24.功能讲解-新闻资讯功能## 25.功能讲解-用户管理功能## 26.功能讲解-修改密码功能## 27.补充讲解-地图功能## 28.补充讲解-邮件发送功能## 29.补充讲解-轮播图讲解## 30.实战开发-如何实现一个单独的模块————举报模块</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Verio是一个基于SSM+JSP的房屋租赁系统，包括管理员、房东和租客三种角色。&lt;br&gt;介绍地址：&lt;/p&gt;
&lt;h2 id=&quot;0-视频介绍&quot;&gt;&lt;a href=&quot;#0-视频介绍&quot; class=&quot;headerlink&quot; title=&quot;0. 视频介绍&quot;&gt;&lt;/a&gt;0. 视频介绍&lt;/</summary>
      
    
    
    
    <category term="Java学习" scheme="https://github.com/253715/253715.github.io.git/categories/Java%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="springboot" scheme="https://github.com/253715/253715.github.io.git/tags/springboot/"/>
    
    <category term="房屋出租管理系统" scheme="https://github.com/253715/253715.github.io.git/tags/%E6%88%BF%E5%B1%8B%E5%87%BA%E7%A7%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
