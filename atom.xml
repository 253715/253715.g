<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学技术的小凯</title>
  
  
  <link href="https://github.com/253715/253715.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/253715/253715.github.io.git/"/>
  <updated>2022-04-30T06:53:45.702Z</updated>
  <id>https://github.com/253715/253715.github.io.git/</id>
  
  <author>
    <name>JonQuet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://github.com/253715/253715.github.io.git/2022/04/30/Verio%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E8%AF%B4%E6%98%8E/"/>
    <id>https://github.com/253715/253715.github.io.git/2022/04/30/Verio%E8%A7%86%E9%A2%91%E8%AE%B2%E8%A7%A3%E8%AF%B4%E6%98%8E/</id>
    <published>2022-04-30T07:04:30.137Z</published>
    <updated>2022-04-30T06:53:45.702Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: spingboot<br>date: 2022-04-30 14:32:41<br>tags: springboot项目</p><hr><p>Verio是一个基于SSM+JSP的房屋租赁系统，包括管理员、房东和租客三种角色。<br>介绍地址：</p><h2 id="0-视频介绍"><a href="#0-视频介绍" class="headerlink" title="0. 视频介绍"></a>0. 视频介绍</h2><h2 id="1-项目导入，推荐插件安装，启动项目"><a href="#1-项目导入，推荐插件安装，启动项目" class="headerlink" title="1. 项目导入，推荐插件安装，启动项目"></a>1. 项目导入，推荐插件安装，启动项目</h2><h4 id="1）项目导入过程如下"><a href="#1）项目导入过程如下" class="headerlink" title="1）项目导入过程如下"></a>1）项目导入过程如下</h4><ul><li>通过IDEA导入，修改Constant里uploads目录位置</li><li>修改 db.properties</li><li>配置tomcat</li><li>创建数据库</li><li>导入数据库</li><li>运行tomcat</li></ul><h4 id="2）推荐插件"><a href="#2）推荐插件" class="headerlink" title="2）推荐插件"></a>2）推荐插件</h4><ul><li>搜索 Lombok，功能是帮我们生成getter/setter方法，在类上面加@Data注解即可，不要再写一大堆getter/setter方法啦！</li><li>搜索 Free MyBatis，功能是帮我们从mapper接口快速跳转到mapper xml </li><li>搜索 RestfulToolkit，帮我们快速找到接口代码位置，即根据接口路径找controller类里方法位置，快捷键 ctrl + \</li></ul><h2 id="2-数据库设计讲解和功能介绍，交叉讲"><a href="#2-数据库设计讲解和功能介绍，交叉讲" class="headerlink" title="2. 数据库设计讲解和功能介绍，交叉讲"></a>2. 数据库设计讲解和功能介绍，交叉讲</h2><ul><li>t_feedback  反馈表</li><li>t_house  房屋信息表</li><li>t_mark  收藏表</li><li>t_news  新闻表</li><li>t_order     订单表</li><li>t_user   用户表</li></ul><h2 id="3-代码结构简单说明"><a href="#3-代码结构简单说明" class="headerlink" title="3. 代码结构简单说明"></a>3. 代码结构简单说明</h2><ul><li><p>pom.xml 项目依赖工具</p></li><li><p>src/main 代码父目录</p></li><li><pre><code>java  Java代码目录</code></pre></li><li><pre><code>    common 公共的类：配置、常量、封装的对象 </code></pre></li><li><pre><code>    controller  控制器，负责接收请求，后端代码入口在这里，通常这一层会去调用 service 层(本质是service impl层)</code></pre></li><li><pre><code>    entity实体类，跟数据库表一一对应，表名对应类名，字段名对应属性名</code></pre></li><li><pre><code>    mapper数据访问层，即直接操作数据库的接口(继承baseMapper，省去了增删改查的方法)</code></pre></li><li><pre><code>    service业务逻辑层接口</code></pre></li><li><pre><code>        impl业务逻辑层实现，通常这一层会去调用 mapper 层</code></pre></li><li><p>常用调用关系：</p><pre class="line-numbers language-none"><code class="language-none">浏览器或js里的ajax方法 -&gt; controller -&gt; service impl -&gt; mapper -&gt;数据库SQL语句<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>java  Java代码目录</p></li><li><p>resources 配置文件目录</p></li><li><p>webapp 前端文件目录</p></li></ul><h2 id="4-Spring讲解"><a href="#4-Spring讲解" class="headerlink" title="4. Spring讲解"></a>4. Spring讲解</h2><p>Spring帮我们管理对象，不会重复创建对象，节约内存</p><h4 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h4><ul><li>1）给需要让Spring管理的类加注解，如 @Service、@Controller、@Repository、@Component，如<pre class="line-numbers language-none"><code class="language-none">@Servicepublic class HouseServiceImpl implements HouseService {......}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>2）给需要创建对象的地方，@Autowired，如<pre class="line-numbers language-none"><code class="language-none">@Autowiredprivate HouseService houseService;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="5-MyBatis讲解，JDBC、MyBatis、MyBatisPlus对比"><a href="#5-MyBatis讲解，JDBC、MyBatis、MyBatisPlus对比" class="headerlink" title="5. MyBatis讲解，JDBC、MyBatis、MyBatisPlus对比"></a>5. MyBatis讲解，JDBC、MyBatis、MyBatisPlus对比</h2><p>mybatis：替代原始的JDBC的方法，直接通过定义接口，一个方法对应一个SQL语句，mybatis帮我们执行，不需要我们去处理像JDBC一样拿数据那么麻烦</p><p>举例：根据用户ID查询用户</p><ul><li><p>1）JDBC的写法</p><pre class="line-numbers language-none"><code class="language-none">String sql = "SELECT * FROM user where id= ? ";PreparedStatement statement = connection.prepareStatement(sql);statement.setString(1, name);ResultSet rs = statement.executeQuery();while (rs.next()) {// 将数据库的数据转换成POJO实例user.setId(rs.getInt("id"));user.setUserName(rs.getString("userName"));user.setNickName(rs.getString("nickname"));user.setPhone(rs.getString("phone"));user.setEmail(rs.getString("email"));...... // 有几个属性需要set几次}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2）MyBatis 写法</p><pre class="line-numbers language-none"><code class="language-none">@Select("select * from user where id = #{value}")User findById(Long id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>3） MyBatis Plus写法<br>直接让Mapper接口基础 BaseMapper ，不需要再去写增删改查的逻辑了，直接从父类里面调用，父类的实现由mybatis plus帮我们做(动态代理实现)</p></li></ul><h2 id="6-SpringMVC讲解，Servlet和SpringMVC对比"><a href="#6-SpringMVC讲解，Servlet和SpringMVC对比" class="headerlink" title="6. SpringMVC讲解，Servlet和SpringMVC对比"></a>6. SpringMVC讲解，Servlet和SpringMVC对比</h2><p>SpringMVC 帮助我们管理请求接口，处理请求<br>如 查询用户信息页面</p><h4 id="Servlet-和-SpringMVC对比"><a href="#Servlet-和-SpringMVC对比" class="headerlink" title="Servlet 和 SpringMVC对比"></a>Servlet 和 SpringMVC对比</h4><ul><li><p>1）Servlet 的写法</p><pre class="line-numbers language-none"><code class="language-none">@WebServlet("/user/info")public class UserInfoGetServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 解决乱码        request.setCharacterEncoding("utf-8");        // 获取用户ID        Long id = (Long) request.getParameter("id");       // 去调用service 查询用户信息       User user = userService.findById(id);        // 把用户信息传给前端         request.setAttribute("user", user);        //向页面跳转        request.getRequestDispatcher("/jsp/user/info.jsp").forward(request,response);    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        this.doGet(req, resp);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ol start="2"><li>SpringMVC写法<pre class="line-numbers language-none"><code class="language-none">@RequestMapping("/user/info")public String profile(@RequestParam("id") Long id,  Model model) {// 去调用service 查询用户信息    User user = userService.get(id);    // 把用户信息传给前端     model.addAttribute("user", user);    // 页面跳转,在这个页面渲染    return "admin/my-profile";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h4 id="SpringMVC详细讲解"><a href="#SpringMVC详细讲解" class="headerlink" title="SpringMVC详细讲解"></a>SpringMVC详细讲解</h4><p>1）@RequestParam<br>如新闻列表</p><pre class="line-numbers language-none"><code class="language-none">@RequestMapping("/news")   public String index(@RequestParam(value = "page", defaultValue = "1") Integer pageNumber,                       @RequestParam(value = "size", defaultValue = "6") Integer pageSize,) {       ...   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）@PathVariable<br>房子详情页面</p><pre class="line-numbers language-none"><code class="language-none">@RequestMapping("/house/detail/{id}")   public String search(@PathVariable("id") Long id) {   ...   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>@ResponseBody<br>登录提交请求<pre class="line-numbers language-none"><code class="language-none">@RequestMapping(value = "/login/submit", method = RequestMethod.POST)   @ResponseBody   public JsonResult loginSubmit(@RequestParam("userName") String userName,                                 @RequestParam("userPass") String userPass) {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="7-JSP讲解"><a href="#7-JSP讲解" class="headerlink" title="7.JSP讲解"></a>7.JSP讲解</h2><p>模块分块，c:if、c:forEach 等标签的使用，${xxx} 的使用，时间格式化的使用</p><h2 id="8-JavaScript-和-ajax"><a href="#8-JavaScript-和-ajax" class="headerlink" title="8.JavaScript 和 ajax"></a>8.JavaScript 和 ajax</h2><p>onclick=””<br>登录代码示例</p><p>代码位置/webapp/assets/js/script.js<br>JS代码</p><pre class="line-numbers language-none"><code class="language-none">function submitLogin() {    $.ajax({        type: 'POST',        url: '/login/submit',        async: false,        data: $("#loginForm").serialize(), // 获取该表单下的所有参数        success: function (data) {            // 提示信息            alert(data.msg);            // 如果登录成功，刷新页面            if (data.code == 1) {                window.location.reload();            }        }    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSP的代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;button type="button" onclick="submitLogin()" class="btn btn-md full-width pop-login bg-2"&gt;登录&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后端 <code>/login/submit</code> 这个请求的，可以通过 ctrl + \ 搜索，找到<br>后端代码controller这个方法必须要加 @ResponseBody</p><h2 id="9-怎么找代码和看代码？"><a href="#9-怎么找代码和看代码？" class="headerlink" title="9. 怎么找代码和看代码？"></a>9. 怎么找代码和看代码？</h2><ul><li>全局搜索字符串，快捷键 ctrl + shift + f，比如我想搜索这个项目里所有的 Verio 的字符串，可以用这个快捷键</li><li>搜索接口，ctrl + \ ，比如我想搜索用户相关的接口，搜 /user，比如我要搜登录接口代码 /login/submit</li></ul><h2 id="10-功能讲解-登录功能"><a href="#10-功能讲解-登录功能" class="headerlink" title="10.功能讲解-登录功能"></a>10.功能讲解-登录功能</h2><h2 id="11-功能讲解-注册功能"><a href="#11-功能讲解-注册功能" class="headerlink" title="11.功能讲解-注册功能"></a>11.功能讲解-注册功能</h2><h2 id="12-功能讲解-找回密码功能"><a href="#12-功能讲解-找回密码功能" class="headerlink" title="12.功能讲解-找回密码功能"></a>12.功能讲解-找回密码功能</h2><h2 id="13-功能讲解-整租-x2F-合租列表和搜索功能"><a href="#13-功能讲解-整租-x2F-合租列表和搜索功能" class="headerlink" title="13.功能讲解-整租/合租列表和搜索功能"></a>13.功能讲解-整租/合租列表和搜索功能</h2><h2 id="14-功能讲解-房屋详情功能"><a href="#14-功能讲解-房屋详情功能" class="headerlink" title="14.功能讲解-房屋详情功能"></a>14.功能讲解-房屋详情功能</h2><h2 id="15-功能讲解-联系房东功能"><a href="#15-功能讲解-联系房东功能" class="headerlink" title="15.功能讲解-联系房东功能"></a>15.功能讲解-联系房东功能</h2><h2 id="16-功能讲解-创建订单功能"><a href="#16-功能讲解-创建订单功能" class="headerlink" title="16.功能讲解-创建订单功能"></a>16.功能讲解-创建订单功能</h2><h2 id="17-功能讲解-签订合同功能"><a href="#17-功能讲解-签订合同功能" class="headerlink" title="17.功能讲解-签订合同功能"></a>17.功能讲解-签订合同功能</h2><h2 id="18-功能讲解-支付页面功能"><a href="#18-功能讲解-支付页面功能" class="headerlink" title="18.功能讲解-支付页面功能"></a>18.功能讲解-支付页面功能</h2><h2 id="19-功能讲解-我的家-房屋列表-功能"><a href="#19-功能讲解-我的家-房屋列表-功能" class="headerlink" title="19.功能讲解-我的家(房屋列表)功能"></a>19.功能讲解-我的家(房屋列表)功能</h2><h2 id="20-功能讲解-订单相关管理功能、取消、退租、退租审核"><a href="#20-功能讲解-订单相关管理功能、取消、退租、退租审核" class="headerlink" title="20.功能讲解-订单相关管理功能、取消、退租、退租审核"></a>20.功能讲解-订单相关管理功能、取消、退租、退租审核</h2><h2 id="21-功能讲解-房屋列表功能、发布房屋功能、审核以及下架相关功能"><a href="#21-功能讲解-房屋列表功能、发布房屋功能、审核以及下架相关功能" class="headerlink" title="21.功能讲解-房屋列表功能、发布房屋功能、审核以及下架相关功能"></a>21.功能讲解-房屋列表功能、发布房屋功能、审核以及下架相关功能</h2><h2 id="22-功能讲解-收藏功能"><a href="#22-功能讲解-收藏功能" class="headerlink" title="22.功能讲解-收藏功能"></a>22.功能讲解-收藏功能</h2><h2 id="23-功能讲解-反馈功能"><a href="#23-功能讲解-反馈功能" class="headerlink" title="23.功能讲解-反馈功能"></a>23.功能讲解-反馈功能</h2><h2 id="24-功能讲解-新闻资讯功能"><a href="#24-功能讲解-新闻资讯功能" class="headerlink" title="24.功能讲解-新闻资讯功能"></a>24.功能讲解-新闻资讯功能</h2><h2 id="25-功能讲解-用户管理功能"><a href="#25-功能讲解-用户管理功能" class="headerlink" title="25.功能讲解-用户管理功能"></a>25.功能讲解-用户管理功能</h2><h2 id="26-功能讲解-修改密码功能"><a href="#26-功能讲解-修改密码功能" class="headerlink" title="26.功能讲解-修改密码功能"></a>26.功能讲解-修改密码功能</h2><h2 id="27-补充讲解-地图功能"><a href="#27-补充讲解-地图功能" class="headerlink" title="27.补充讲解-地图功能"></a>27.补充讲解-地图功能</h2><h2 id="28-补充讲解-邮件发送功能"><a href="#28-补充讲解-邮件发送功能" class="headerlink" title="28.补充讲解-邮件发送功能"></a>28.补充讲解-邮件发送功能</h2><h2 id="29-补充讲解-轮播图讲解"><a href="#29-补充讲解-轮播图讲解" class="headerlink" title="29.补充讲解-轮播图讲解"></a>29.补充讲解-轮播图讲解</h2><h2 id="30-实战开发-如何实现一个单独的模块————举报模块"><a href="#30-实战开发-如何实现一个单独的模块————举报模块" class="headerlink" title="30.实战开发-如何实现一个单独的模块————举报模块"></a>30.实战开发-如何实现一个单独的模块————举报模块</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: spingboot&lt;br&gt;date: 2022-04-30 14:32:41&lt;br&gt;tags: springboot项目&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Verio是一个基于SSM+JSP的房屋租赁系统，包括管理员、房东和租客三种角色。&lt;br&gt;介绍地址：&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>spingboot</title>
    <link href="https://github.com/253715/253715.github.io.git/2022/04/30/spingboot/"/>
    <id>https://github.com/253715/253715.github.io.git/2022/04/30/spingboot/</id>
    <published>2022-04-30T06:32:41.000Z</published>
    <updated>2022-04-30T06:32:42.006Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
